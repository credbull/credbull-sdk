import {
  type AbiParameterToPrimitiveType,
  type BaseTransactionOptions,
  prepareContractCall,
  prepareEvent,
  readContract,
} from 'thirdweb';

/**
 * ===========================================================================================================
 * ========================================= Generated DO NOT MODIFY =========================================
 * ===========================================================================================================
 *
 * Contract: LiquidContinuousMultiTokenVault (tag v1.3)
 * Arbitrum Sepolia: 0x111b6a3dbace7f0b32baad47027907765e88abd2
 *
 * Generated by: yarn thirdweb generate 421614/0x111b6a3dbace7f0b32baad47027907765e88abd2
 * More details: https://portal.thirdweb.com/typescript/v5/extensions/generate
 *
 */

/**
 * Contract events
 */

/**
 * Represents the filters for the "ApprovalForAll" event.
 */
export type ApprovalForAllEventFilters = Partial<{
  account: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'address'; name: 'account'; type: 'address' }>;
  operator: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'address'; name: 'operator'; type: 'address' }>;
}>;

/**
 * Creates an event object for the ApprovalForAll event.
 * @param filters - Optional filters to apply to the event.
 * @returns The prepared event object.
 * @example
 * ```
 * import { getContractEvents } from "thirdweb";
 * import { approvalForAllEvent } from "LiquidContinuousMultiTokenVault";
 *
 * const events = await getContractEvents({
 * contract,
 * events: [
 *  approvalForAllEvent({
 *  account: ...,
 *  operator: ...,
 * })
 * ],
 * });
 * ```
 */
export function approvalForAllEvent(filters: ApprovalForAllEventFilters = {}) {
  return prepareEvent({
    signature: 'event ApprovalForAll(address indexed account, address indexed operator, bool approved)',
    filters,
  });
}

/**
 * Represents the filters for the "AssetTransfer" event.
 */
export type AssetTransferEventFilters = Partial<{
  sender: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'address'; name: 'sender'; type: 'address' }>;
  receiver: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'address'; name: 'receiver'; type: 'address' }>;
}>;

/**
 * Creates an event object for the AssetTransfer event.
 * @param filters - Optional filters to apply to the event.
 * @returns The prepared event object.
 * @example
 * ```
 * import { getContractEvents } from "thirdweb";
 * import { assetTransferEvent } from "LiquidContinuousMultiTokenVault";
 *
 * const events = await getContractEvents({
 * contract,
 * events: [
 *  assetTransferEvent({
 *  sender: ...,
 *  receiver: ...,
 * })
 * ],
 * });
 * ```
 */
export function assetTransferEvent(filters: AssetTransferEventFilters = {}) {
  return prepareEvent({
    signature: 'event AssetTransfer(address indexed sender, address indexed receiver, address asset, uint256 amount)',
    filters,
  });
}

/**
 * Represents the filters for the "CancelRedeemRequest" event.
 */
export type CancelRedeemRequestEventFilters = Partial<{
  owner: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'address'; name: 'owner'; type: 'address' }>;
  requestId: AbiParameterToPrimitiveType<{
    indexed: true;
    internalType: 'uint256';
    name: 'requestId';
    type: 'uint256';
  }>;
  sender: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'address'; name: 'sender'; type: 'address' }>;
}>;

/**
 * Creates an event object for the CancelRedeemRequest event.
 * @param filters - Optional filters to apply to the event.
 * @returns The prepared event object.
 * @example
 * ```
 * import { getContractEvents } from "thirdweb";
 * import { cancelRedeemRequestEvent } from "LiquidContinuousMultiTokenVault";
 *
 * const events = await getContractEvents({
 * contract,
 * events: [
 *  cancelRedeemRequestEvent({
 *  owner: ...,
 *  requestId: ...,
 *  sender: ...,
 * })
 * ],
 * });
 * ```
 */
export function cancelRedeemRequestEvent(filters: CancelRedeemRequestEventFilters = {}) {
  return prepareEvent({
    signature: 'event CancelRedeemRequest(address indexed owner, uint256 indexed requestId, address indexed sender)',
    filters,
  });
}

/**
 * Creates an event object for the CurrentPeriodRateChanged event.
 * @returns The prepared event object.
 * @example
 * ```
 * import { getContractEvents } from "thirdweb";
 * import { currentPeriodRateChangedEvent } from "LiquidContinuousMultiTokenVault";
 *
 * const events = await getContractEvents({
 * contract,
 * events: [
 *  currentPeriodRateChangedEvent()
 * ],
 * });
 * ```
 */
export function currentPeriodRateChangedEvent() {
  return prepareEvent({
    signature: 'event CurrentPeriodRateChanged(uint256 interestRate, uint256 effectiveFromPeriod)',
  });
}

/**
 * Creates an event object for the CurrentTenorPeriodAndRateChanged event.
 * @returns The prepared event object.
 * @example
 * ```
 * import { getContractEvents } from "thirdweb";
 * import { currentTenorPeriodAndRateChangedEvent } from "LiquidContinuousMultiTokenVault";
 *
 * const events = await getContractEvents({
 * contract,
 * events: [
 *  currentTenorPeriodAndRateChangedEvent()
 * ],
 * });
 * ```
 */
export function currentTenorPeriodAndRateChangedEvent() {
  return prepareEvent({
    signature: 'event CurrentTenorPeriodAndRateChanged(uint256 tenorPeriod, uint256 reducedRate)',
  });
}

/**
 * Represents the filters for the "Deposit" event.
 */
export type DepositEventFilters = Partial<{
  sender: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'address'; name: 'sender'; type: 'address' }>;
  receiver: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'address'; name: 'receiver'; type: 'address' }>;
}>;

/**
 * Creates an event object for the Deposit event.
 * @param filters - Optional filters to apply to the event.
 * @returns The prepared event object.
 * @example
 * ```
 * import { getContractEvents } from "thirdweb";
 * import { depositEvent } from "LiquidContinuousMultiTokenVault";
 *
 * const events = await getContractEvents({
 * contract,
 * events: [
 *  depositEvent({
 *  sender: ...,
 *  receiver: ...,
 * })
 * ],
 * });
 * ```
 */
export function depositEvent(filters: DepositEventFilters = {}) {
  return prepareEvent({
    signature:
      'event Deposit(address indexed sender, address indexed receiver, uint256 depositPeriod, uint256 assets, uint256 shares)',
    filters,
  });
}

/**
 * Represents the filters for the "DepositRequest" event.
 */
export type DepositRequestEventFilters = Partial<{
  controller: AbiParameterToPrimitiveType<{
    indexed: true;
    internalType: 'address';
    name: 'controller';
    type: 'address';
  }>;
  owner: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'address'; name: 'owner'; type: 'address' }>;
  requestId: AbiParameterToPrimitiveType<{
    indexed: true;
    internalType: 'uint256';
    name: 'requestId';
    type: 'uint256';
  }>;
}>;

/**
 * Creates an event object for the DepositRequest event.
 * @param filters - Optional filters to apply to the event.
 * @returns The prepared event object.
 * @example
 * ```
 * import { getContractEvents } from "thirdweb";
 * import { depositRequestEvent } from "LiquidContinuousMultiTokenVault";
 *
 * const events = await getContractEvents({
 * contract,
 * events: [
 *  depositRequestEvent({
 *  controller: ...,
 *  owner: ...,
 *  requestId: ...,
 * })
 * ],
 * });
 * ```
 */
export function depositRequestEvent(filters: DepositRequestEventFilters = {}) {
  return prepareEvent({
    signature:
      'event DepositRequest(address indexed controller, address indexed owner, uint256 indexed requestId, address sender, uint256 assets)',
    filters,
  });
}

/**
 * Creates an event object for the Initialized event.
 * @returns The prepared event object.
 * @example
 * ```
 * import { getContractEvents } from "thirdweb";
 * import { initializedEvent } from "LiquidContinuousMultiTokenVault";
 *
 * const events = await getContractEvents({
 * contract,
 * events: [
 *  initializedEvent()
 * ],
 * });
 * ```
 */
export function initializedEvent() {
  return prepareEvent({
    signature: 'event Initialized(uint64 version)',
  });
}

/**
 * Creates an event object for the Paused event.
 * @returns The prepared event object.
 * @example
 * ```
 * import { getContractEvents } from "thirdweb";
 * import { pausedEvent } from "LiquidContinuousMultiTokenVault";
 *
 * const events = await getContractEvents({
 * contract,
 * events: [
 *  pausedEvent()
 * ],
 * });
 * ```
 */
export function pausedEvent() {
  return prepareEvent({
    signature: 'event Paused(address account)',
  });
}

/**
 * Represents the filters for the "RedeemRequest" event.
 */
export type RedeemRequestEventFilters = Partial<{
  controller: AbiParameterToPrimitiveType<{
    indexed: true;
    internalType: 'address';
    name: 'controller';
    type: 'address';
  }>;
  owner: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'address'; name: 'owner'; type: 'address' }>;
  requestId: AbiParameterToPrimitiveType<{
    indexed: true;
    internalType: 'uint256';
    name: 'requestId';
    type: 'uint256';
  }>;
}>;

/**
 * Creates an event object for the RedeemRequest event.
 * @param filters - Optional filters to apply to the event.
 * @returns The prepared event object.
 * @example
 * ```
 * import { getContractEvents } from "thirdweb";
 * import { redeemRequestEvent } from "LiquidContinuousMultiTokenVault";
 *
 * const events = await getContractEvents({
 * contract,
 * events: [
 *  redeemRequestEvent({
 *  controller: ...,
 *  owner: ...,
 *  requestId: ...,
 * })
 * ],
 * });
 * ```
 */
export function redeemRequestEvent(filters: RedeemRequestEventFilters = {}) {
  return prepareEvent({
    signature:
      'event RedeemRequest(address indexed controller, address indexed owner, uint256 indexed requestId, address sender, uint256 shares)',
    filters,
  });
}

/**
 * Represents the filters for the "RoleAdminChanged" event.
 */
export type RoleAdminChangedEventFilters = Partial<{
  role: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'bytes32'; name: 'role'; type: 'bytes32' }>;
  previousAdminRole: AbiParameterToPrimitiveType<{
    indexed: true;
    internalType: 'bytes32';
    name: 'previousAdminRole';
    type: 'bytes32';
  }>;
  newAdminRole: AbiParameterToPrimitiveType<{
    indexed: true;
    internalType: 'bytes32';
    name: 'newAdminRole';
    type: 'bytes32';
  }>;
}>;

/**
 * Creates an event object for the RoleAdminChanged event.
 * @param filters - Optional filters to apply to the event.
 * @returns The prepared event object.
 * @example
 * ```
 * import { getContractEvents } from "thirdweb";
 * import { roleAdminChangedEvent } from "LiquidContinuousMultiTokenVault";
 *
 * const events = await getContractEvents({
 * contract,
 * events: [
 *  roleAdminChangedEvent({
 *  role: ...,
 *  previousAdminRole: ...,
 *  newAdminRole: ...,
 * })
 * ],
 * });
 * ```
 */
export function roleAdminChangedEvent(filters: RoleAdminChangedEventFilters = {}) {
  return prepareEvent({
    signature:
      'event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)',
    filters,
  });
}

/**
 * Represents the filters for the "RoleGranted" event.
 */
export type RoleGrantedEventFilters = Partial<{
  role: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'bytes32'; name: 'role'; type: 'bytes32' }>;
  account: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'address'; name: 'account'; type: 'address' }>;
  sender: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'address'; name: 'sender'; type: 'address' }>;
}>;

/**
 * Creates an event object for the RoleGranted event.
 * @param filters - Optional filters to apply to the event.
 * @returns The prepared event object.
 * @example
 * ```
 * import { getContractEvents } from "thirdweb";
 * import { roleGrantedEvent } from "LiquidContinuousMultiTokenVault";
 *
 * const events = await getContractEvents({
 * contract,
 * events: [
 *  roleGrantedEvent({
 *  role: ...,
 *  account: ...,
 *  sender: ...,
 * })
 * ],
 * });
 * ```
 */
export function roleGrantedEvent(filters: RoleGrantedEventFilters = {}) {
  return prepareEvent({
    signature: 'event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)',
    filters,
  });
}

/**
 * Represents the filters for the "RoleRevoked" event.
 */
export type RoleRevokedEventFilters = Partial<{
  role: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'bytes32'; name: 'role'; type: 'bytes32' }>;
  account: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'address'; name: 'account'; type: 'address' }>;
  sender: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'address'; name: 'sender'; type: 'address' }>;
}>;

/**
 * Creates an event object for the RoleRevoked event.
 * @param filters - Optional filters to apply to the event.
 * @returns The prepared event object.
 * @example
 * ```
 * import { getContractEvents } from "thirdweb";
 * import { roleRevokedEvent } from "LiquidContinuousMultiTokenVault";
 *
 * const events = await getContractEvents({
 * contract,
 * events: [
 *  roleRevokedEvent({
 *  role: ...,
 *  account: ...,
 *  sender: ...,
 * })
 * ],
 * });
 * ```
 */
export function roleRevokedEvent(filters: RoleRevokedEventFilters = {}) {
  return prepareEvent({
    signature: 'event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)',
    filters,
  });
}

/**
 * Represents the filters for the "TransferBatch" event.
 */
export type TransferBatchEventFilters = Partial<{
  operator: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'address'; name: 'operator'; type: 'address' }>;
  from: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'address'; name: 'from'; type: 'address' }>;
  to: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'address'; name: 'to'; type: 'address' }>;
}>;

/**
 * Creates an event object for the TransferBatch event.
 * @param filters - Optional filters to apply to the event.
 * @returns The prepared event object.
 * @example
 * ```
 * import { getContractEvents } from "thirdweb";
 * import { transferBatchEvent } from "LiquidContinuousMultiTokenVault";
 *
 * const events = await getContractEvents({
 * contract,
 * events: [
 *  transferBatchEvent({
 *  operator: ...,
 *  from: ...,
 *  to: ...,
 * })
 * ],
 * });
 * ```
 */
export function transferBatchEvent(filters: TransferBatchEventFilters = {}) {
  return prepareEvent({
    signature:
      'event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)',
    filters,
  });
}

/**
 * Represents the filters for the "TransferSingle" event.
 */
export type TransferSingleEventFilters = Partial<{
  operator: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'address'; name: 'operator'; type: 'address' }>;
  from: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'address'; name: 'from'; type: 'address' }>;
  to: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'address'; name: 'to'; type: 'address' }>;
}>;

/**
 * Creates an event object for the TransferSingle event.
 * @param filters - Optional filters to apply to the event.
 * @returns The prepared event object.
 * @example
 * ```
 * import { getContractEvents } from "thirdweb";
 * import { transferSingleEvent } from "LiquidContinuousMultiTokenVault";
 *
 * const events = await getContractEvents({
 * contract,
 * events: [
 *  transferSingleEvent({
 *  operator: ...,
 *  from: ...,
 *  to: ...,
 * })
 * ],
 * });
 * ```
 */
export function transferSingleEvent(filters: TransferSingleEventFilters = {}) {
  return prepareEvent({
    signature:
      'event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)',
    filters,
  });
}

/**
 * Represents the filters for the "URI" event.
 */
export type URIEventFilters = Partial<{
  id: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'uint256'; name: 'id'; type: 'uint256' }>;
}>;

/**
 * Creates an event object for the URI event.
 * @param filters - Optional filters to apply to the event.
 * @returns The prepared event object.
 * @example
 * ```
 * import { getContractEvents } from "thirdweb";
 * import { uRIEvent } from "LiquidContinuousMultiTokenVault";
 *
 * const events = await getContractEvents({
 * contract,
 * events: [
 *  uRIEvent({
 *  id: ...,
 * })
 * ],
 * });
 * ```
 */
export function uRIEvent(filters: URIEventFilters = {}) {
  return prepareEvent({
    signature: 'event URI(string value, uint256 indexed id)',
    filters,
  });
}

/**
 * Creates an event object for the Unpaused event.
 * @returns The prepared event object.
 * @example
 * ```
 * import { getContractEvents } from "thirdweb";
 * import { unpausedEvent } from "LiquidContinuousMultiTokenVault";
 *
 * const events = await getContractEvents({
 * contract,
 * events: [
 *  unpausedEvent()
 * ],
 * });
 * ```
 */
export function unpausedEvent() {
  return prepareEvent({
    signature: 'event Unpaused(address account)',
  });
}

/**
 * Represents the filters for the "Upgraded" event.
 */
export type UpgradedEventFilters = Partial<{
  implementation: AbiParameterToPrimitiveType<{
    indexed: true;
    internalType: 'address';
    name: 'implementation';
    type: 'address';
  }>;
}>;

/**
 * Creates an event object for the Upgraded event.
 * @param filters - Optional filters to apply to the event.
 * @returns The prepared event object.
 * @example
 * ```
 * import { getContractEvents } from "thirdweb";
 * import { upgradedEvent } from "LiquidContinuousMultiTokenVault";
 *
 * const events = await getContractEvents({
 * contract,
 * events: [
 *  upgradedEvent({
 *  implementation: ...,
 * })
 * ],
 * });
 * ```
 */
export function upgradedEvent(filters: UpgradedEventFilters = {}) {
  return prepareEvent({
    signature: 'event Upgraded(address indexed implementation)',
    filters,
  });
}

/**
 * Represents the filters for the "Withdraw" event.
 */
export type WithdrawEventFilters = Partial<{
  sender: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'address'; name: 'sender'; type: 'address' }>;
  receiver: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'address'; name: 'receiver'; type: 'address' }>;
  owner: AbiParameterToPrimitiveType<{ indexed: true; internalType: 'address'; name: 'owner'; type: 'address' }>;
}>;

/**
 * Creates an event object for the Withdraw event.
 * @param filters - Optional filters to apply to the event.
 * @returns The prepared event object.
 * @example
 * ```
 * import { getContractEvents } from "thirdweb";
 * import { withdrawEvent } from "LiquidContinuousMultiTokenVault";
 *
 * const events = await getContractEvents({
 * contract,
 * events: [
 *  withdrawEvent({
 *  sender: ...,
 *  receiver: ...,
 *  owner: ...,
 * })
 * ],
 * });
 * ```
 */
export function withdrawEvent(filters: WithdrawEventFilters = {}) {
  return prepareEvent({
    signature:
      'event Withdraw(address indexed sender, address indexed receiver, address indexed owner, uint256 assets, uint256 shares)',
    filters,
  });
}

/**
 * Contract read functions
 */

/**
 * Calls the "ASSET_MANAGER_ROLE" function on the contract.
 * @param options - The options for the ASSET_MANAGER_ROLE function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { ASSET_MANAGER_ROLE } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await ASSET_MANAGER_ROLE();
 *
 * ```
 */
export async function ASSET_MANAGER_ROLE(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0xa4b32de8',
      [],
      [
        {
          internalType: 'bytes32',
          name: '',
          type: 'bytes32',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Calls the "CLOCK_MODE" function on the contract.
 * @param options - The options for the CLOCK_MODE function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { CLOCK_MODE } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await CLOCK_MODE();
 *
 * ```
 */
export async function CLOCK_MODE(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0x4bf5d7e9',
      [],
      [
        {
          internalType: 'string',
          name: '',
          type: 'string',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Calls the "DEFAULT_ADMIN_ROLE" function on the contract.
 * @param options - The options for the DEFAULT_ADMIN_ROLE function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { DEFAULT_ADMIN_ROLE } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await DEFAULT_ADMIN_ROLE();
 *
 * ```
 */
export async function DEFAULT_ADMIN_ROLE(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0xa217fddf',
      [],
      [
        {
          internalType: 'bytes32',
          name: '',
          type: 'bytes32',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Calls the "FREQUENCY" function on the contract.
 * @param options - The options for the FREQUENCY function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { FREQUENCY } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await FREQUENCY();
 *
 * ```
 */
export async function FREQUENCY(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0xc229d750',
      [],
      [
        {
          internalType: 'uint256',
          name: '',
          type: 'uint256',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Calls the "OPERATOR_ROLE" function on the contract.
 * @param options - The options for the OPERATOR_ROLE function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { OPERATOR_ROLE } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await OPERATOR_ROLE();
 *
 * ```
 */
export async function OPERATOR_ROLE(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0xf5b541a6',
      [],
      [
        {
          internalType: 'bytes32',
          name: '',
          type: 'bytes32',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Calls the "RATE_PERCENT_SCALED" function on the contract.
 * @param options - The options for the RATE_PERCENT_SCALED function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { RATE_PERCENT_SCALED } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await RATE_PERCENT_SCALED();
 *
 * ```
 */
export async function RATE_PERCENT_SCALED(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0xebeca551',
      [],
      [
        {
          internalType: 'uint256',
          name: '',
          type: 'uint256',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Calls the "SCALE" function on the contract.
 * @param options - The options for the SCALE function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { SCALE } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await SCALE();
 *
 * ```
 */
export async function SCALE(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0xeced5526',
      [],
      [
        {
          internalType: 'uint256',
          name: '',
          type: 'uint256',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Calls the "TENOR" function on the contract.
 * @param options - The options for the TENOR function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { TENOR } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await TENOR();
 *
 * ```
 */
export async function TENOR(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0xe819a21d',
      [],
      [
        {
          internalType: 'uint256',
          name: '',
          type: 'uint256',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Calls the "UPGRADER_ROLE" function on the contract.
 * @param options - The options for the UPGRADER_ROLE function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { UPGRADER_ROLE } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await UPGRADER_ROLE();
 *
 * ```
 */
export async function UPGRADER_ROLE(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0xf72c0d8b',
      [],
      [
        {
          internalType: 'bytes32',
          name: '',
          type: 'bytes32',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Calls the "UPGRADE_INTERFACE_VERSION" function on the contract.
 * @param options - The options for the UPGRADE_INTERFACE_VERSION function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { UPGRADE_INTERFACE_VERSION } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await UPGRADE_INTERFACE_VERSION();
 *
 * ```
 */
export async function UPGRADE_INTERFACE_VERSION(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0xad3cb1cc',
      [],
      [
        {
          internalType: 'string',
          name: '',
          type: 'string',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Calls the "_redeemOptimizer" function on the contract.
 * @param options - The options for the _redeemOptimizer function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { _redeemOptimizer } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await _redeemOptimizer();
 *
 * ```
 */
export async function _redeemOptimizer(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0xd4968c79',
      [],
      [
        {
          internalType: 'contract IRedeemOptimizer',
          name: '',
          type: 'address',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Calls the "_vaultStartTimestamp" function on the contract.
 * @param options - The options for the _vaultStartTimestamp function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { _vaultStartTimestamp } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await _vaultStartTimestamp();
 *
 * ```
 */
export async function _vaultStartTimestamp(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0x2dc68872',
      [],
      [
        {
          internalType: 'uint256',
          name: '',
          type: 'uint256',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Calls the "_yieldStrategy" function on the contract.
 * @param options - The options for the _yieldStrategy function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { _yieldStrategy } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await _yieldStrategy();
 *
 * ```
 */
export async function _yieldStrategy(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0x69edb23f',
      [],
      [
        {
          internalType: 'contract IYieldStrategy',
          name: '',
          type: 'address',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Calls the "asset" function on the contract.
 * @param options - The options for the asset function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { asset } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await asset();
 *
 * ```
 */
export async function asset(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0x38d52e0f',
      [],
      [
        {
          internalType: 'address',
          name: 'assetTokenAddress',
          type: 'address',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Represents the parameters for the "balanceOf" function.
 */
export type BalanceOfParams = {
  account: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'account'; type: 'address' }>;
  id: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'id'; type: 'uint256' }>;
};

/**
 * Calls the "balanceOf" function on the contract.
 * @param options - The options for the balanceOf function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { balanceOf } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await balanceOf({
 *  account: ...,
 *  id: ...,
 * });
 *
 * ```
 */
export async function balanceOf(options: BaseTransactionOptions<BalanceOfParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0x00fdd58e',
      [
        {
          internalType: 'address',
          name: 'account',
          type: 'address',
        },
        {
          internalType: 'uint256',
          name: 'id',
          type: 'uint256',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: '',
          type: 'uint256',
        },
      ],
    ],
    params: [options.account, options.id],
  });
}

/**
 * Represents the parameters for the "balanceOfBatch" function.
 */
export type BalanceOfBatchParams = {
  accounts: AbiParameterToPrimitiveType<{ internalType: 'address[]'; name: 'accounts'; type: 'address[]' }>;
  ids: AbiParameterToPrimitiveType<{ internalType: 'uint256[]'; name: 'ids'; type: 'uint256[]' }>;
};

/**
 * Calls the "balanceOfBatch" function on the contract.
 * @param options - The options for the balanceOfBatch function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { balanceOfBatch } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await balanceOfBatch({
 *  accounts: ...,
 *  ids: ...,
 * });
 *
 * ```
 */
export async function balanceOfBatch(options: BaseTransactionOptions<BalanceOfBatchParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0x4e1273f4',
      [
        {
          internalType: 'address[]',
          name: 'accounts',
          type: 'address[]',
        },
        {
          internalType: 'uint256[]',
          name: 'ids',
          type: 'uint256[]',
        },
      ],
      [
        {
          internalType: 'uint256[]',
          name: '',
          type: 'uint256[]',
        },
      ],
    ],
    params: [options.accounts, options.ids],
  });
}

/**
 * Represents the parameters for the "calcPrice" function.
 */
export type CalcPriceParams = {
  arg_0: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: ''; type: 'uint256' }>;
};

/**
 * Calls the "calcPrice" function on the contract.
 * @param options - The options for the calcPrice function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { calcPrice } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await calcPrice({
 *  arg_0: ...,
 * });
 *
 * ```
 */
export async function calcPrice(options: BaseTransactionOptions<CalcPriceParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0x20b92bf6',
      [
        {
          internalType: 'uint256',
          name: '',
          type: 'uint256',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: 'price',
          type: 'uint256',
        },
      ],
    ],
    params: [options.arg_0],
  });
}

/**
 * Represents the parameters for the "calcYield" function.
 */
export type CalcYieldParams = {
  principal: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'principal'; type: 'uint256' }>;
  depositPeriod: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'depositPeriod'; type: 'uint256' }>;
  redeemPeriod: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'redeemPeriod'; type: 'uint256' }>;
};

/**
 * Calls the "calcYield" function on the contract.
 * @param options - The options for the calcYield function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { calcYield } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await calcYield({
 *  principal: ...,
 *  depositPeriod: ...,
 *  redeemPeriod: ...,
 * });
 *
 * ```
 */
export async function calcYield(options: BaseTransactionOptions<CalcYieldParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0x0bd0fe8a',
      [
        {
          internalType: 'uint256',
          name: 'principal',
          type: 'uint256',
        },
        {
          internalType: 'uint256',
          name: 'depositPeriod',
          type: 'uint256',
        },
        {
          internalType: 'uint256',
          name: 'redeemPeriod',
          type: 'uint256',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: 'yield',
          type: 'uint256',
        },
      ],
    ],
    params: [options.principal, options.depositPeriod, options.redeemPeriod],
  });
}

/**
 * Represents the parameters for the "claimableDepositRequest" function.
 */
export type ClaimableDepositRequestParams = {
  arg_0: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: ''; type: 'uint256' }>;
  arg_1: AbiParameterToPrimitiveType<{ internalType: 'address'; name: ''; type: 'address' }>;
};

/**
 * Calls the "claimableDepositRequest" function on the contract.
 * @param options - The options for the claimableDepositRequest function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { claimableDepositRequest } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await claimableDepositRequest({
 *  arg_0: ...,
 *  arg_1: ...,
 * });
 *
 * ```
 */
export async function claimableDepositRequest(options: BaseTransactionOptions<ClaimableDepositRequestParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0x995ea21a',
      [
        {
          internalType: 'uint256',
          name: '',
          type: 'uint256',
        },
        {
          internalType: 'address',
          name: '',
          type: 'address',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: 'assets',
          type: 'uint256',
        },
      ],
    ],
    params: [options.arg_0, options.arg_1],
  });
}

/**
 * Represents the parameters for the "claimableRedeemRequest" function.
 */
export type ClaimableRedeemRequestParams = {
  requestId: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'requestId'; type: 'uint256' }>;
  controller: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'controller'; type: 'address' }>;
};

/**
 * Calls the "claimableRedeemRequest" function on the contract.
 * @param options - The options for the claimableRedeemRequest function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { claimableRedeemRequest } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await claimableRedeemRequest({
 *  requestId: ...,
 *  controller: ...,
 * });
 *
 * ```
 */
export async function claimableRedeemRequest(options: BaseTransactionOptions<ClaimableRedeemRequestParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0xeaed1d07',
      [
        {
          internalType: 'uint256',
          name: 'requestId',
          type: 'uint256',
        },
        {
          internalType: 'address',
          name: 'controller',
          type: 'address',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: 'shares',
          type: 'uint256',
        },
      ],
    ],
    params: [options.requestId, options.controller],
  });
}

/**
 * Calls the "clock" function on the contract.
 * @param options - The options for the clock function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { clock } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await clock();
 *
 * ```
 */
export async function clock(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0x91ddadf4',
      [],
      [
        {
          internalType: 'uint48',
          name: 'clock_',
          type: 'uint48',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Represents the parameters for the "convertToAssets" function.
 */
export type ConvertToAssetsParams = {
  shares: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'shares'; type: 'uint256' }>;
};

/**
 * Calls the "convertToAssets" function on the contract.
 * @param options - The options for the convertToAssets function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { convertToAssets } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await convertToAssets({
 *  shares: ...,
 * });
 *
 * ```
 */
export async function convertToAssets(options: BaseTransactionOptions<ConvertToAssetsParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0x07a2d13a',
      [
        {
          internalType: 'uint256',
          name: 'shares',
          type: 'uint256',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: 'assets_',
          type: 'uint256',
        },
      ],
    ],
    params: [options.shares],
  });
}

/**
 * Represents the parameters for the "convertToAssetsForDepositPeriod" function.
 */
export type ConvertToAssetsForDepositPeriodParams = {
  shares: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'shares'; type: 'uint256' }>;
  depositPeriod: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'depositPeriod'; type: 'uint256' }>;
  redeemPeriod: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'redeemPeriod'; type: 'uint256' }>;
};

/**
 * Calls the "convertToAssetsForDepositPeriod" function on the contract.
 * @param options - The options for the convertToAssetsForDepositPeriod function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { convertToAssetsForDepositPeriod } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await convertToAssetsForDepositPeriod({
 *  shares: ...,
 *  depositPeriod: ...,
 *  redeemPeriod: ...,
 * });
 *
 * ```
 */
export async function convertToAssetsForDepositPeriod(
  options: BaseTransactionOptions<ConvertToAssetsForDepositPeriodParams>,
) {
  return readContract({
    contract: options.contract,
    method: [
      '0x12400151',
      [
        {
          internalType: 'uint256',
          name: 'shares',
          type: 'uint256',
        },
        {
          internalType: 'uint256',
          name: 'depositPeriod',
          type: 'uint256',
        },
        {
          internalType: 'uint256',
          name: 'redeemPeriod',
          type: 'uint256',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: 'assets',
          type: 'uint256',
        },
      ],
    ],
    params: [options.shares, options.depositPeriod, options.redeemPeriod],
  });
}

/**
 * Represents the parameters for the "convertToAssetsForDepositPeriodBatch" function.
 */
export type ConvertToAssetsForDepositPeriodBatchParams = {
  shares: AbiParameterToPrimitiveType<{ internalType: 'uint256[]'; name: 'shares'; type: 'uint256[]' }>;
  depositPeriods: AbiParameterToPrimitiveType<{ internalType: 'uint256[]'; name: 'depositPeriods'; type: 'uint256[]' }>;
  redeemPeriod: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'redeemPeriod'; type: 'uint256' }>;
};

/**
 * Calls the "convertToAssetsForDepositPeriodBatch" function on the contract.
 * @param options - The options for the convertToAssetsForDepositPeriodBatch function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { convertToAssetsForDepositPeriodBatch } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await convertToAssetsForDepositPeriodBatch({
 *  shares: ...,
 *  depositPeriods: ...,
 *  redeemPeriod: ...,
 * });
 *
 * ```
 */
export async function convertToAssetsForDepositPeriodBatch(
  options: BaseTransactionOptions<ConvertToAssetsForDepositPeriodBatchParams>,
) {
  return readContract({
    contract: options.contract,
    method: [
      '0xad4c5fc2',
      [
        {
          internalType: 'uint256[]',
          name: 'shares',
          type: 'uint256[]',
        },
        {
          internalType: 'uint256[]',
          name: 'depositPeriods',
          type: 'uint256[]',
        },
        {
          internalType: 'uint256',
          name: 'redeemPeriod',
          type: 'uint256',
        },
      ],
      [
        {
          internalType: 'uint256[]',
          name: 'assets_',
          type: 'uint256[]',
        },
      ],
    ],
    params: [options.shares, options.depositPeriods, options.redeemPeriod],
  });
}

/**
 * Represents the parameters for the "convertToShares" function.
 */
export type ConvertToSharesParams = {
  assets: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'assets'; type: 'uint256' }>;
};

/**
 * Calls the "convertToShares" function on the contract.
 * @param options - The options for the convertToShares function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { convertToShares } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await convertToShares({
 *  assets: ...,
 * });
 *
 * ```
 */
export async function convertToShares(options: BaseTransactionOptions<ConvertToSharesParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0xc6e6f592',
      [
        {
          internalType: 'uint256',
          name: 'assets',
          type: 'uint256',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: 'shares',
          type: 'uint256',
        },
      ],
    ],
    params: [options.assets],
  });
}

/**
 * Represents the parameters for the "convertToSharesForDepositPeriod" function.
 */
export type ConvertToSharesForDepositPeriodParams = {
  assets: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'assets'; type: 'uint256' }>;
  arg_1: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: ''; type: 'uint256' }>;
};

/**
 * Calls the "convertToSharesForDepositPeriod" function on the contract.
 * @param options - The options for the convertToSharesForDepositPeriod function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { convertToSharesForDepositPeriod } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await convertToSharesForDepositPeriod({
 *  assets: ...,
 *  arg_1: ...,
 * });
 *
 * ```
 */
export async function convertToSharesForDepositPeriod(
  options: BaseTransactionOptions<ConvertToSharesForDepositPeriodParams>,
) {
  return readContract({
    contract: options.contract,
    method: [
      '0x7df87ce0',
      [
        {
          internalType: 'uint256',
          name: 'assets',
          type: 'uint256',
        },
        {
          internalType: 'uint256',
          name: '',
          type: 'uint256',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: 'shares',
          type: 'uint256',
        },
      ],
    ],
    params: [options.assets, options.arg_1],
  });
}

/**
 * Calls the "currentPeriod" function on the contract.
 * @param options - The options for the currentPeriod function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { currentPeriod } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await currentPeriod();
 *
 * ```
 */
export async function currentPeriod(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0x06040618',
      [],
      [
        {
          internalType: 'uint256',
          name: 'currentPeriod_',
          type: 'uint256',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Calls the "currentPeriodRate" function on the contract.
 * @param options - The options for the currentPeriodRate function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { currentPeriodRate } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await currentPeriodRate();
 *
 * ```
 */
export async function currentPeriodRate(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0x0142c8de',
      [],
      [
        {
          components: [
            {
              internalType: 'uint256',
              name: 'interestRate',
              type: 'uint256',
            },
            {
              internalType: 'uint256',
              name: 'effectiveFromPeriod',
              type: 'uint256',
            },
          ],
          internalType: 'struct ITripleRateContext.PeriodRate',
          name: 'currentPeriodRate_',
          type: 'tuple',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Calls the "currentPeriodsElapsed" function on the contract.
 * @param options - The options for the currentPeriodsElapsed function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { currentPeriodsElapsed } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await currentPeriodsElapsed();
 *
 * ```
 */
export async function currentPeriodsElapsed(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0x3290daad',
      [],
      [
        {
          internalType: 'uint256',
          name: 'numPeriodsElapsed_',
          type: 'uint256',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Represents the parameters for the "exists" function.
 */
export type ExistsParams = {
  id: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'id'; type: 'uint256' }>;
};

/**
 * Calls the "exists" function on the contract.
 * @param options - The options for the exists function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { exists } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await exists({
 *  id: ...,
 * });
 *
 * ```
 */
export async function exists(options: BaseTransactionOptions<ExistsParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0x4f558e79',
      [
        {
          internalType: 'uint256',
          name: 'id',
          type: 'uint256',
        },
      ],
      [
        {
          internalType: 'bool',
          name: '',
          type: 'bool',
        },
      ],
    ],
    params: [options.id],
  });
}

/**
 * Calls the "frequency" function on the contract.
 * @param options - The options for the frequency function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { frequency } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await frequency();
 *
 * ```
 */
export async function frequency(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0xead50da3',
      [],
      [
        {
          internalType: 'uint256',
          name: 'frequency_',
          type: 'uint256',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Represents the parameters for the "getRoleAdmin" function.
 */
export type GetRoleAdminParams = {
  role: AbiParameterToPrimitiveType<{ internalType: 'bytes32'; name: 'role'; type: 'bytes32' }>;
};

/**
 * Calls the "getRoleAdmin" function on the contract.
 * @param options - The options for the getRoleAdmin function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { getRoleAdmin } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await getRoleAdmin({
 *  role: ...,
 * });
 *
 * ```
 */
export async function getRoleAdmin(options: BaseTransactionOptions<GetRoleAdminParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0x248a9ca3',
      [
        {
          internalType: 'bytes32',
          name: 'role',
          type: 'bytes32',
        },
      ],
      [
        {
          internalType: 'bytes32',
          name: '',
          type: 'bytes32',
        },
      ],
    ],
    params: [options.role],
  });
}

/**
 * Represents the parameters for the "getRoleMember" function.
 */
export type GetRoleMemberParams = {
  role: AbiParameterToPrimitiveType<{ internalType: 'bytes32'; name: 'role'; type: 'bytes32' }>;
  index: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'index'; type: 'uint256' }>;
};

/**
 * Calls the "getRoleMember" function on the contract.
 * @param options - The options for the getRoleMember function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { getRoleMember } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await getRoleMember({
 *  role: ...,
 *  index: ...,
 * });
 *
 * ```
 */
export async function getRoleMember(options: BaseTransactionOptions<GetRoleMemberParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0x9010d07c',
      [
        {
          internalType: 'bytes32',
          name: 'role',
          type: 'bytes32',
        },
        {
          internalType: 'uint256',
          name: 'index',
          type: 'uint256',
        },
      ],
      [
        {
          internalType: 'address',
          name: '',
          type: 'address',
        },
      ],
    ],
    params: [options.role, options.index],
  });
}

/**
 * Represents the parameters for the "getRoleMemberCount" function.
 */
export type GetRoleMemberCountParams = {
  role: AbiParameterToPrimitiveType<{ internalType: 'bytes32'; name: 'role'; type: 'bytes32' }>;
};

/**
 * Calls the "getRoleMemberCount" function on the contract.
 * @param options - The options for the getRoleMemberCount function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { getRoleMemberCount } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await getRoleMemberCount({
 *  role: ...,
 * });
 *
 * ```
 */
export async function getRoleMemberCount(options: BaseTransactionOptions<GetRoleMemberCountParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0xca15c873',
      [
        {
          internalType: 'bytes32',
          name: 'role',
          type: 'bytes32',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: '',
          type: 'uint256',
        },
      ],
    ],
    params: [options.role],
  });
}

/**
 * Calls the "getVersion" function on the contract.
 * @param options - The options for the getVersion function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { getVersion } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await getVersion();
 *
 * ```
 */
export async function getVersion(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0x0d8e6e2c',
      [],
      [
        {
          internalType: 'uint256',
          name: 'version',
          type: 'uint256',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Represents the parameters for the "hasRole" function.
 */
export type HasRoleParams = {
  role: AbiParameterToPrimitiveType<{ internalType: 'bytes32'; name: 'role'; type: 'bytes32' }>;
  account: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'account'; type: 'address' }>;
};

/**
 * Calls the "hasRole" function on the contract.
 * @param options - The options for the hasRole function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { hasRole } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await hasRole({
 *  role: ...,
 *  account: ...,
 * });
 *
 * ```
 */
export async function hasRole(options: BaseTransactionOptions<HasRoleParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0x91d14854',
      [
        {
          internalType: 'bytes32',
          name: 'role',
          type: 'bytes32',
        },
        {
          internalType: 'address',
          name: 'account',
          type: 'address',
        },
      ],
      [
        {
          internalType: 'bool',
          name: '',
          type: 'bool',
        },
      ],
    ],
    params: [options.role, options.account],
  });
}

/**
 * Represents the parameters for the "isApprovedForAll" function.
 */
export type IsApprovedForAllParams = {
  account: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'account'; type: 'address' }>;
  operator: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'operator'; type: 'address' }>;
};

/**
 * Calls the "isApprovedForAll" function on the contract.
 * @param options - The options for the isApprovedForAll function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { isApprovedForAll } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await isApprovedForAll({
 *  account: ...,
 *  operator: ...,
 * });
 *
 * ```
 */
export async function isApprovedForAll(options: BaseTransactionOptions<IsApprovedForAllParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0xe985e9c5',
      [
        {
          internalType: 'address',
          name: 'account',
          type: 'address',
        },
        {
          internalType: 'address',
          name: 'operator',
          type: 'address',
        },
      ],
      [
        {
          internalType: 'bool',
          name: '',
          type: 'bool',
        },
      ],
    ],
    params: [options.account, options.operator],
  });
}

/**
 * Represents the parameters for the "lockedAmount" function.
 */
export type LockedAmountParams = {
  account: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'account'; type: 'address' }>;
  depositPeriod: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'depositPeriod'; type: 'uint256' }>;
};

/**
 * Calls the "lockedAmount" function on the contract.
 * @param options - The options for the lockedAmount function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { lockedAmount } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await lockedAmount({
 *  account: ...,
 *  depositPeriod: ...,
 * });
 *
 * ```
 */
export async function lockedAmount(options: BaseTransactionOptions<LockedAmountParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0xa61bb764',
      [
        {
          internalType: 'address',
          name: 'account',
          type: 'address',
        },
        {
          internalType: 'uint256',
          name: 'depositPeriod',
          type: 'uint256',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: 'lockedAmount_',
          type: 'uint256',
        },
      ],
    ],
    params: [options.account, options.depositPeriod],
  });
}

/**
 * Represents the parameters for the "maxDeposit" function.
 */
export type MaxDepositParams = {
  arg_0: AbiParameterToPrimitiveType<{ internalType: 'address'; name: ''; type: 'address' }>;
};

/**
 * Calls the "maxDeposit" function on the contract.
 * @param options - The options for the maxDeposit function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { maxDeposit } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await maxDeposit({
 *  arg_0: ...,
 * });
 *
 * ```
 */
export async function maxDeposit(options: BaseTransactionOptions<MaxDepositParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0x402d267d',
      [
        {
          internalType: 'address',
          name: '',
          type: 'address',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: '',
          type: 'uint256',
        },
      ],
    ],
    params: [options.arg_0],
  });
}

/**
 * Represents the parameters for the "maxRedeemAtPeriod" function.
 */
export type MaxRedeemAtPeriodParams = {
  owner: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'owner'; type: 'address' }>;
  depositPeriod: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'depositPeriod'; type: 'uint256' }>;
};

/**
 * Calls the "maxRedeemAtPeriod" function on the contract.
 * @param options - The options for the maxRedeemAtPeriod function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { maxRedeemAtPeriod } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await maxRedeemAtPeriod({
 *  owner: ...,
 *  depositPeriod: ...,
 * });
 *
 * ```
 */
export async function maxRedeemAtPeriod(options: BaseTransactionOptions<MaxRedeemAtPeriodParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0x16e6514c',
      [
        {
          internalType: 'address',
          name: 'owner',
          type: 'address',
        },
        {
          internalType: 'uint256',
          name: 'depositPeriod',
          type: 'uint256',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: 'maxShares',
          type: 'uint256',
        },
      ],
    ],
    params: [options.owner, options.depositPeriod],
  });
}

/**
 * Represents the parameters for the "maxRequestUnlock" function.
 */
export type MaxRequestUnlockParams = {
  owner: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'owner'; type: 'address' }>;
  depositPeriod: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'depositPeriod'; type: 'uint256' }>;
};

/**
 * Calls the "maxRequestUnlock" function on the contract.
 * @param options - The options for the maxRequestUnlock function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { maxRequestUnlock } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await maxRequestUnlock({
 *  owner: ...,
 *  depositPeriod: ...,
 * });
 *
 * ```
 */
export async function maxRequestUnlock(options: BaseTransactionOptions<MaxRequestUnlockParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0xb269901e',
      [
        {
          internalType: 'address',
          name: 'owner',
          type: 'address',
        },
        {
          internalType: 'uint256',
          name: 'depositPeriod',
          type: 'uint256',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: '',
          type: 'uint256',
        },
      ],
    ],
    params: [options.owner, options.depositPeriod],
  });
}

/**
 * Calls the "minUnlockPeriod" function on the contract.
 * @param options - The options for the minUnlockPeriod function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { minUnlockPeriod } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await minUnlockPeriod();
 *
 * ```
 */
export async function minUnlockPeriod(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0xf6a8e2d6',
      [],
      [
        {
          internalType: 'uint256',
          name: 'minUnlockPeriod_',
          type: 'uint256',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Calls the "noticePeriod" function on the contract.
 * @param options - The options for the noticePeriod function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { noticePeriod } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await noticePeriod();
 *
 * ```
 */
export async function noticePeriod(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0x9b14d4c6',
      [],
      [
        {
          internalType: 'uint256',
          name: 'noticePeriod_',
          type: 'uint256',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Calls the "numPeriodsForFullRate" function on the contract.
 * @param options - The options for the numPeriodsForFullRate function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { numPeriodsForFullRate } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await numPeriodsForFullRate();
 *
 * ```
 */
export async function numPeriodsForFullRate(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0xbaa1017e',
      [],
      [
        {
          internalType: 'uint256',
          name: 'numPeriods',
          type: 'uint256',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Calls the "paused" function on the contract.
 * @param options - The options for the paused function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { paused } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await paused();
 *
 * ```
 */
export async function paused(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0x5c975abb',
      [],
      [
        {
          internalType: 'bool',
          name: '',
          type: 'bool',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Represents the parameters for the "pendingDepositRequest" function.
 */
export type PendingDepositRequestParams = {
  arg_0: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: ''; type: 'uint256' }>;
  arg_1: AbiParameterToPrimitiveType<{ internalType: 'address'; name: ''; type: 'address' }>;
};

/**
 * Calls the "pendingDepositRequest" function on the contract.
 * @param options - The options for the pendingDepositRequest function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { pendingDepositRequest } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await pendingDepositRequest({
 *  arg_0: ...,
 *  arg_1: ...,
 * });
 *
 * ```
 */
export async function pendingDepositRequest(options: BaseTransactionOptions<PendingDepositRequestParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0x26c6f96c',
      [
        {
          internalType: 'uint256',
          name: '',
          type: 'uint256',
        },
        {
          internalType: 'address',
          name: '',
          type: 'address',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: 'assets',
          type: 'uint256',
        },
      ],
    ],
    params: [options.arg_0, options.arg_1],
  });
}

/**
 * Represents the parameters for the "pendingRedeemRequest" function.
 */
export type PendingRedeemRequestParams = {
  requestId: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'requestId'; type: 'uint256' }>;
  arg_1: AbiParameterToPrimitiveType<{ internalType: 'address'; name: ''; type: 'address' }>;
};

/**
 * Calls the "pendingRedeemRequest" function on the contract.
 * @param options - The options for the pendingRedeemRequest function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { pendingRedeemRequest } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await pendingRedeemRequest({
 *  requestId: ...,
 *  arg_1: ...,
 * });
 *
 * ```
 */
export async function pendingRedeemRequest(options: BaseTransactionOptions<PendingRedeemRequestParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0xf5a23d8d',
      [
        {
          internalType: 'uint256',
          name: 'requestId',
          type: 'uint256',
        },
        {
          internalType: 'address',
          name: '',
          type: 'address',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: 'shares',
          type: 'uint256',
        },
      ],
    ],
    params: [options.requestId, options.arg_1],
  });
}

/**
 * Represents the parameters for the "previewDeposit" function.
 */
export type PreviewDepositParams = {
  assets: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'assets'; type: 'uint256' }>;
};

/**
 * Calls the "previewDeposit" function on the contract.
 * @param options - The options for the previewDeposit function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { previewDeposit } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await previewDeposit({
 *  assets: ...,
 * });
 *
 * ```
 */
export async function previewDeposit(options: BaseTransactionOptions<PreviewDepositParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0xef8b30f7',
      [
        {
          internalType: 'uint256',
          name: 'assets',
          type: 'uint256',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: 'shares',
          type: 'uint256',
        },
      ],
    ],
    params: [options.assets],
  });
}

/**
 * Represents the parameters for the "previewRedeemForDepositPeriod" function.
 */
export type PreviewRedeemForDepositPeriodParams = {
  shares: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'shares'; type: 'uint256' }>;
  depositPeriod: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'depositPeriod'; type: 'uint256' }>;
};

/**
 * Calls the "previewRedeemForDepositPeriod" function on the contract.
 * @param options - The options for the previewRedeemForDepositPeriod function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { previewRedeemForDepositPeriod } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await previewRedeemForDepositPeriod({
 *  shares: ...,
 *  depositPeriod: ...,
 * });
 *
 * ```
 */
export async function previewRedeemForDepositPeriod(
  options: BaseTransactionOptions<PreviewRedeemForDepositPeriodParams>,
) {
  return readContract({
    contract: options.contract,
    method: [
      '0x93b088d5',
      [
        {
          internalType: 'uint256',
          name: 'shares',
          type: 'uint256',
        },
        {
          internalType: 'uint256',
          name: 'depositPeriod',
          type: 'uint256',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: 'assets',
          type: 'uint256',
        },
      ],
    ],
    params: [options.shares, options.depositPeriod],
  });
}

/**
 * Calls the "previousPeriodRate" function on the contract.
 * @param options - The options for the previousPeriodRate function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { previousPeriodRate } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await previousPeriodRate();
 *
 * ```
 */
export async function previousPeriodRate(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0x1336a756',
      [],
      [
        {
          components: [
            {
              internalType: 'uint256',
              name: 'interestRate',
              type: 'uint256',
            },
            {
              internalType: 'uint256',
              name: 'effectiveFromPeriod',
              type: 'uint256',
            },
          ],
          internalType: 'struct ITripleRateContext.PeriodRate',
          name: 'previousPeriodRate_',
          type: 'tuple',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Calls the "proxiableUUID" function on the contract.
 * @param options - The options for the proxiableUUID function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { proxiableUUID } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await proxiableUUID();
 *
 * ```
 */
export async function proxiableUUID(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0x52d1902d',
      [],
      [
        {
          internalType: 'bytes32',
          name: '',
          type: 'bytes32',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Calls the "rateScaled" function on the contract.
 * @param options - The options for the rateScaled function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { rateScaled } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await rateScaled();
 *
 * ```
 */
export async function rateScaled(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0xe675dbed',
      [],
      [
        {
          internalType: 'uint256',
          name: 'ratePercentageScaled_',
          type: 'uint256',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Calls the "scale" function on the contract.
 * @param options - The options for the scale function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { scale } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await scale();
 *
 * ```
 */
export async function scale(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0xf51e181a',
      [],
      [
        {
          internalType: 'uint256',
          name: 'scale_',
          type: 'uint256',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Represents the parameters for the "sharesAtPeriod" function.
 */
export type SharesAtPeriodParams = {
  owner: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'owner'; type: 'address' }>;
  depositPeriod: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'depositPeriod'; type: 'uint256' }>;
};

/**
 * Calls the "sharesAtPeriod" function on the contract.
 * @param options - The options for the sharesAtPeriod function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { sharesAtPeriod } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await sharesAtPeriod({
 *  owner: ...,
 *  depositPeriod: ...,
 * });
 *
 * ```
 */
export async function sharesAtPeriod(options: BaseTransactionOptions<SharesAtPeriodParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0x8461629a',
      [
        {
          internalType: 'address',
          name: 'owner',
          type: 'address',
        },
        {
          internalType: 'uint256',
          name: 'depositPeriod',
          type: 'uint256',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: 'shares',
          type: 'uint256',
        },
      ],
    ],
    params: [options.owner, options.depositPeriod],
  });
}

/**
 * Represents the parameters for the "supportsInterface" function.
 */
export type SupportsInterfaceParams = {
  interfaceId: AbiParameterToPrimitiveType<{ internalType: 'bytes4'; name: 'interfaceId'; type: 'bytes4' }>;
};

/**
 * Calls the "supportsInterface" function on the contract.
 * @param options - The options for the supportsInterface function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { supportsInterface } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await supportsInterface({
 *  interfaceId: ...,
 * });
 *
 * ```
 */
export async function supportsInterface(options: BaseTransactionOptions<SupportsInterfaceParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0x01ffc9a7',
      [
        {
          internalType: 'bytes4',
          name: 'interfaceId',
          type: 'bytes4',
        },
      ],
      [
        {
          internalType: 'bool',
          name: '',
          type: 'bool',
        },
      ],
    ],
    params: [options.interfaceId],
  });
}

/**
 * Calls the "totalAssets" function on the contract.
 * @param options - The options for the totalAssets function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { totalAssets } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await totalAssets();
 *
 * ```
 */
export async function totalAssets(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0x01e1d114',
      [],
      [
        {
          internalType: 'uint256',
          name: 'totalManagedAssets',
          type: 'uint256',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Calls the "totalSupply" function on the contract.
 * @param options - The options for the totalSupply function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { totalSupply } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await totalSupply();
 *
 * ```
 */
export async function totalSupply(options: BaseTransactionOptions) {
  return readContract({
    contract: options.contract,
    method: [
      '0x18160ddd',
      [],
      [
        {
          internalType: 'uint256',
          name: '',
          type: 'uint256',
        },
      ],
    ],
    params: [],
  });
}

/**
 * Represents the parameters for the "unlockRequestAmount" function.
 */
export type UnlockRequestAmountParams = {
  owner: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'owner'; type: 'address' }>;
  requestId: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'requestId'; type: 'uint256' }>;
};

/**
 * Calls the "unlockRequestAmount" function on the contract.
 * @param options - The options for the unlockRequestAmount function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { unlockRequestAmount } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await unlockRequestAmount({
 *  owner: ...,
 *  requestId: ...,
 * });
 *
 * ```
 */
export async function unlockRequestAmount(options: BaseTransactionOptions<UnlockRequestAmountParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0xb3d11df0',
      [
        {
          internalType: 'address',
          name: 'owner',
          type: 'address',
        },
        {
          internalType: 'uint256',
          name: 'requestId',
          type: 'uint256',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: 'amount_',
          type: 'uint256',
        },
      ],
    ],
    params: [options.owner, options.requestId],
  });
}

/**
 * Represents the parameters for the "unlockRequestAmountByDepositPeriod" function.
 */
export type UnlockRequestAmountByDepositPeriodParams = {
  owner: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'owner'; type: 'address' }>;
  depositPeriod: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'depositPeriod'; type: 'uint256' }>;
};

/**
 * Calls the "unlockRequestAmountByDepositPeriod" function on the contract.
 * @param options - The options for the unlockRequestAmountByDepositPeriod function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { unlockRequestAmountByDepositPeriod } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await unlockRequestAmountByDepositPeriod({
 *  owner: ...,
 *  depositPeriod: ...,
 * });
 *
 * ```
 */
export async function unlockRequestAmountByDepositPeriod(
  options: BaseTransactionOptions<UnlockRequestAmountByDepositPeriodParams>,
) {
  return readContract({
    contract: options.contract,
    method: [
      '0x290de3ca',
      [
        {
          internalType: 'address',
          name: 'owner',
          type: 'address',
        },
        {
          internalType: 'uint256',
          name: 'depositPeriod',
          type: 'uint256',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: 'amount',
          type: 'uint256',
        },
      ],
    ],
    params: [options.owner, options.depositPeriod],
  });
}

/**
 * Represents the parameters for the "unlockRequestDepositPeriods" function.
 */
export type UnlockRequestDepositPeriodsParams = {
  owner: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'owner'; type: 'address' }>;
  requestId: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'requestId'; type: 'uint256' }>;
};

/**
 * Calls the "unlockRequestDepositPeriods" function on the contract.
 * @param options - The options for the unlockRequestDepositPeriods function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { unlockRequestDepositPeriods } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await unlockRequestDepositPeriods({
 *  owner: ...,
 *  requestId: ...,
 * });
 *
 * ```
 */
export async function unlockRequestDepositPeriods(options: BaseTransactionOptions<UnlockRequestDepositPeriodsParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0xd04f9397',
      [
        {
          internalType: 'address',
          name: 'owner',
          type: 'address',
        },
        {
          internalType: 'uint256',
          name: 'requestId',
          type: 'uint256',
        },
      ],
      [
        {
          internalType: 'uint256[]',
          name: 'depositPeriods_',
          type: 'uint256[]',
        },
      ],
    ],
    params: [options.owner, options.requestId],
  });
}

/**
 * Represents the parameters for the "unlockRequests" function.
 */
export type UnlockRequestsParams = {
  owner: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'owner'; type: 'address' }>;
  requestId: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'requestId'; type: 'uint256' }>;
};

/**
 * Calls the "unlockRequests" function on the contract.
 * @param options - The options for the unlockRequests function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { unlockRequests } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await unlockRequests({
 *  owner: ...,
 *  requestId: ...,
 * });
 *
 * ```
 */
export async function unlockRequests(options: BaseTransactionOptions<UnlockRequestsParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0x6d6757ea',
      [
        {
          internalType: 'address',
          name: 'owner',
          type: 'address',
        },
        {
          internalType: 'uint256',
          name: 'requestId',
          type: 'uint256',
        },
      ],
      [
        {
          internalType: 'uint256[]',
          name: 'depositPeriods',
          type: 'uint256[]',
        },
        {
          internalType: 'uint256[]',
          name: 'amounts',
          type: 'uint256[]',
        },
      ],
    ],
    params: [options.owner, options.requestId],
  });
}

/**
 * Represents the parameters for the "uri" function.
 */
export type UriParams = {
  arg_0: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: ''; type: 'uint256' }>;
};

/**
 * Calls the "uri" function on the contract.
 * @param options - The options for the uri function.
 * @returns The parsed result of the function call.
 * @example
 * ```
 * import { uri } from "LiquidContinuousMultiTokenVault";
 *
 * const result = await uri({
 *  arg_0: ...,
 * });
 *
 * ```
 */
export async function uri(options: BaseTransactionOptions<UriParams>) {
  return readContract({
    contract: options.contract,
    method: [
      '0x0e89341c',
      [
        {
          internalType: 'uint256',
          name: '',
          type: 'uint256',
        },
      ],
      [
        {
          internalType: 'string',
          name: '',
          type: 'string',
        },
      ],
    ],
    params: [options.arg_0],
  });
}

/**
 * Contract write functions
 */

/**
 * Represents the parameters for the "cancelRequestUnlock" function.
 */
export type CancelRequestUnlockParams = {
  owner: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'owner'; type: 'address' }>;
  requestId: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'requestId'; type: 'uint256' }>;
};

/**
 * Calls the "cancelRequestUnlock" function on the contract.
 * @param options - The options for the "cancelRequestUnlock" function.
 * @returns A prepared transaction object.
 * @example
 * ```
 * import { cancelRequestUnlock } from "LiquidContinuousMultiTokenVault";
 *
 * const transaction = cancelRequestUnlock({
 *  owner: ...,
 *  requestId: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function cancelRequestUnlock(options: BaseTransactionOptions<CancelRequestUnlockParams>) {
  return prepareContractCall({
    contract: options.contract,
    method: [
      '0xd9e7ddb6',
      [
        {
          internalType: 'address',
          name: 'owner',
          type: 'address',
        },
        {
          internalType: 'uint256',
          name: 'requestId',
          type: 'uint256',
        },
      ],
      [],
    ],
    params: [options.owner, options.requestId],
  });
}

/**
 * Represents the parameters for the "deposit" function.
 */
export type DepositParams = {
  assets: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'assets'; type: 'uint256' }>;
  receiver: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'receiver'; type: 'address' }>;
  controller: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'controller'; type: 'address' }>;
};

/**
 * Calls the "deposit" function on the contract.
 * @param options - The options for the "deposit" function.
 * @returns A prepared transaction object.
 * @example
 * ```
 * import { deposit } from "LiquidContinuousMultiTokenVault";
 *
 * const transaction = deposit({
 *  assets: ...,
 *  receiver: ...,
 *  controller: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function deposit(options: BaseTransactionOptions<DepositParams>) {
  return prepareContractCall({
    contract: options.contract,
    method: [
      '0x2e2d2984',
      [
        {
          internalType: 'uint256',
          name: 'assets',
          type: 'uint256',
        },
        {
          internalType: 'address',
          name: 'receiver',
          type: 'address',
        },
        {
          internalType: 'address',
          name: 'controller',
          type: 'address',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: 'shares_',
          type: 'uint256',
        },
      ],
    ],
    params: [options.assets, options.receiver, options.controller],
  });
}

/**
 * Represents the parameters for the "grantRole" function.
 */
export type GrantRoleParams = {
  role: AbiParameterToPrimitiveType<{ internalType: 'bytes32'; name: 'role'; type: 'bytes32' }>;
  account: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'account'; type: 'address' }>;
};

/**
 * Calls the "grantRole" function on the contract.
 * @param options - The options for the "grantRole" function.
 * @returns A prepared transaction object.
 * @example
 * ```
 * import { grantRole } from "LiquidContinuousMultiTokenVault";
 *
 * const transaction = grantRole({
 *  role: ...,
 *  account: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function grantRole(options: BaseTransactionOptions<GrantRoleParams>) {
  return prepareContractCall({
    contract: options.contract,
    method: [
      '0x2f2ff15d',
      [
        {
          internalType: 'bytes32',
          name: 'role',
          type: 'bytes32',
        },
        {
          internalType: 'address',
          name: 'account',
          type: 'address',
        },
      ],
      [],
    ],
    params: [options.role, options.account],
  });
}

/**
 * Represents the parameters for the "initialize" function.
 */
export type InitializeParams = {
  vaultParams: AbiParameterToPrimitiveType<{
    components: [
      {
        components: [
          { internalType: 'address'; name: 'owner'; type: 'address' },
          { internalType: 'address'; name: 'operator'; type: 'address' },
          { internalType: 'address'; name: 'upgrader'; type: 'address' },
          { internalType: 'address'; name: 'assetManager'; type: 'address' },
        ];
        internalType: 'struct LiquidContinuousMultiTokenVault.VaultAuth';
        name: 'vaultAuth';
        type: 'tuple';
      },
      { internalType: 'contract IERC20Metadata'; name: 'asset'; type: 'address' },
      { internalType: 'contract IYieldStrategy'; name: 'yieldStrategy'; type: 'address' },
      { internalType: 'contract IRedeemOptimizer'; name: 'redeemOptimizer'; type: 'address' },
      { internalType: 'uint256'; name: 'vaultStartTimestamp'; type: 'uint256' },
      { internalType: 'uint256'; name: 'redeemNoticePeriod'; type: 'uint256' },
      {
        components: [
          { internalType: 'uint256'; name: 'fullRateScaled'; type: 'uint256' },
          {
            components: [
              { internalType: 'uint256'; name: 'interestRate'; type: 'uint256' },
              { internalType: 'uint256'; name: 'effectiveFromPeriod'; type: 'uint256' },
            ];
            internalType: 'struct ITripleRateContext.PeriodRate';
            name: 'initialReducedRate';
            type: 'tuple';
          },
          { internalType: 'uint256'; name: 'frequency'; type: 'uint256' },
          { internalType: 'uint256'; name: 'tenor'; type: 'uint256' },
          { internalType: 'uint256'; name: 'decimals'; type: 'uint256' },
        ];
        internalType: 'struct TripleRateContext.ContextParams';
        name: 'contextParams';
        type: 'tuple';
      },
    ];
    internalType: 'struct LiquidContinuousMultiTokenVault.VaultParams';
    name: 'vaultParams';
    type: 'tuple';
  }>;
};

/**
 * Calls the "initialize" function on the contract.
 * @param options - The options for the "initialize" function.
 * @returns A prepared transaction object.
 * @example
 * ```
 * import { initialize } from "LiquidContinuousMultiTokenVault";
 *
 * const transaction = initialize({
 *  vaultParams: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function initialize(options: BaseTransactionOptions<InitializeParams>) {
  return prepareContractCall({
    contract: options.contract,
    method: [
      '0xaf7d0a25',
      [
        {
          components: [
            {
              components: [
                {
                  internalType: 'address',
                  name: 'owner',
                  type: 'address',
                },
                {
                  internalType: 'address',
                  name: 'operator',
                  type: 'address',
                },
                {
                  internalType: 'address',
                  name: 'upgrader',
                  type: 'address',
                },
                {
                  internalType: 'address',
                  name: 'assetManager',
                  type: 'address',
                },
              ],
              internalType: 'struct LiquidContinuousMultiTokenVault.VaultAuth',
              name: 'vaultAuth',
              type: 'tuple',
            },
            {
              internalType: 'contract IERC20Metadata',
              name: 'asset',
              type: 'address',
            },
            {
              internalType: 'contract IYieldStrategy',
              name: 'yieldStrategy',
              type: 'address',
            },
            {
              internalType: 'contract IRedeemOptimizer',
              name: 'redeemOptimizer',
              type: 'address',
            },
            {
              internalType: 'uint256',
              name: 'vaultStartTimestamp',
              type: 'uint256',
            },
            {
              internalType: 'uint256',
              name: 'redeemNoticePeriod',
              type: 'uint256',
            },
            {
              components: [
                {
                  internalType: 'uint256',
                  name: 'fullRateScaled',
                  type: 'uint256',
                },
                {
                  components: [
                    {
                      internalType: 'uint256',
                      name: 'interestRate',
                      type: 'uint256',
                    },
                    {
                      internalType: 'uint256',
                      name: 'effectiveFromPeriod',
                      type: 'uint256',
                    },
                  ],
                  internalType: 'struct ITripleRateContext.PeriodRate',
                  name: 'initialReducedRate',
                  type: 'tuple',
                },
                {
                  internalType: 'uint256',
                  name: 'frequency',
                  type: 'uint256',
                },
                {
                  internalType: 'uint256',
                  name: 'tenor',
                  type: 'uint256',
                },
                {
                  internalType: 'uint256',
                  name: 'decimals',
                  type: 'uint256',
                },
              ],
              internalType: 'struct TripleRateContext.ContextParams',
              name: 'contextParams',
              type: 'tuple',
            },
          ],
          internalType: 'struct LiquidContinuousMultiTokenVault.VaultParams',
          name: 'vaultParams',
          type: 'tuple',
        },
      ],
      [],
    ],
    params: [options.vaultParams],
  });
}

/**
 * Represents the parameters for the "lock" function.
 */
export type LockParams = {
  account: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'account'; type: 'address' }>;
  depositPeriod: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'depositPeriod'; type: 'uint256' }>;
  amount: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'amount'; type: 'uint256' }>;
};

/**
 * Calls the "lock" function on the contract.
 * @param options - The options for the "lock" function.
 * @returns A prepared transaction object.
 * @example
 * ```
 * import { lock } from "LiquidContinuousMultiTokenVault";
 *
 * const transaction = lock({
 *  account: ...,
 *  depositPeriod: ...,
 *  amount: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function lock(options: BaseTransactionOptions<LockParams>) {
  return prepareContractCall({
    contract: options.contract,
    method: [
      '0xe2ab691d',
      [
        {
          internalType: 'address',
          name: 'account',
          type: 'address',
        },
        {
          internalType: 'uint256',
          name: 'depositPeriod',
          type: 'uint256',
        },
        {
          internalType: 'uint256',
          name: 'amount',
          type: 'uint256',
        },
      ],
      [],
    ],
    params: [options.account, options.depositPeriod, options.amount],
  });
}

/**
 * Calls the "pause" function on the contract.
 * @param options - The options for the "pause" function.
 * @returns A prepared transaction object.
 * @example
 * ```
 * import { pause } from "LiquidContinuousMultiTokenVault";
 *
 * const transaction = pause();
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function pause(options: BaseTransactionOptions) {
  return prepareContractCall({
    contract: options.contract,
    method: ['0x8456cb59', [], []],
    params: [],
  });
}

/**
 * Represents the parameters for the "redeem" function.
 */
export type RedeemParams = {
  shares: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'shares'; type: 'uint256' }>;
  receiver: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'receiver'; type: 'address' }>;
  controller: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'controller'; type: 'address' }>;
};

/**
 * Calls the "redeem" function on the contract.
 * @param options - The options for the "redeem" function.
 * @returns A prepared transaction object.
 * @example
 * ```
 * import { redeem } from "LiquidContinuousMultiTokenVault";
 *
 * const transaction = redeem({
 *  shares: ...,
 *  receiver: ...,
 *  controller: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function redeem(options: BaseTransactionOptions<RedeemParams>) {
  return prepareContractCall({
    contract: options.contract,
    method: [
      '0xba087652',
      [
        {
          internalType: 'uint256',
          name: 'shares',
          type: 'uint256',
        },
        {
          internalType: 'address',
          name: 'receiver',
          type: 'address',
        },
        {
          internalType: 'address',
          name: 'controller',
          type: 'address',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: 'assets',
          type: 'uint256',
        },
      ],
    ],
    params: [options.shares, options.receiver, options.controller],
  });
}

/**
 * Represents the parameters for the "redeemForDepositPeriod" function.
 */
export type RedeemForDepositPeriodParams = {
  shares: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'shares'; type: 'uint256' }>;
  receiver: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'receiver'; type: 'address' }>;
  owner: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'owner'; type: 'address' }>;
  depositPeriod: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'depositPeriod'; type: 'uint256' }>;
  redeemPeriod: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'redeemPeriod'; type: 'uint256' }>;
};

/**
 * Calls the "redeemForDepositPeriod" function on the contract.
 * @param options - The options for the "redeemForDepositPeriod" function.
 * @returns A prepared transaction object.
 * @example
 * ```
 * import { redeemForDepositPeriod } from "LiquidContinuousMultiTokenVault";
 *
 * const transaction = redeemForDepositPeriod({
 *  shares: ...,
 *  receiver: ...,
 *  owner: ...,
 *  depositPeriod: ...,
 *  redeemPeriod: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function redeemForDepositPeriod(options: BaseTransactionOptions<RedeemForDepositPeriodParams>) {
  return prepareContractCall({
    contract: options.contract,
    method: [
      '0x16a7d1a3',
      [
        {
          internalType: 'uint256',
          name: 'shares',
          type: 'uint256',
        },
        {
          internalType: 'address',
          name: 'receiver',
          type: 'address',
        },
        {
          internalType: 'address',
          name: 'owner',
          type: 'address',
        },
        {
          internalType: 'uint256',
          name: 'depositPeriod',
          type: 'uint256',
        },
        {
          internalType: 'uint256',
          name: 'redeemPeriod',
          type: 'uint256',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: 'assets',
          type: 'uint256',
        },
      ],
    ],
    params: [options.shares, options.receiver, options.owner, options.depositPeriod, options.redeemPeriod],
  });
}

/**
 * Represents the parameters for the "renounceRole" function.
 */
export type RenounceRoleParams = {
  role: AbiParameterToPrimitiveType<{ internalType: 'bytes32'; name: 'role'; type: 'bytes32' }>;
  callerConfirmation: AbiParameterToPrimitiveType<{
    internalType: 'address';
    name: 'callerConfirmation';
    type: 'address';
  }>;
};

/**
 * Calls the "renounceRole" function on the contract.
 * @param options - The options for the "renounceRole" function.
 * @returns A prepared transaction object.
 * @example
 * ```
 * import { renounceRole } from "LiquidContinuousMultiTokenVault";
 *
 * const transaction = renounceRole({
 *  role: ...,
 *  callerConfirmation: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function renounceRole(options: BaseTransactionOptions<RenounceRoleParams>) {
  return prepareContractCall({
    contract: options.contract,
    method: [
      '0x36568abe',
      [
        {
          internalType: 'bytes32',
          name: 'role',
          type: 'bytes32',
        },
        {
          internalType: 'address',
          name: 'callerConfirmation',
          type: 'address',
        },
      ],
      [],
    ],
    params: [options.role, options.callerConfirmation],
  });
}

/**
 * Represents the parameters for the "requestDeposit" function.
 */
export type RequestDepositParams = {
  assets: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'assets'; type: 'uint256' }>;
  controller: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'controller'; type: 'address' }>;
  owner: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'owner'; type: 'address' }>;
};

/**
 * Calls the "requestDeposit" function on the contract.
 * @param options - The options for the "requestDeposit" function.
 * @returns A prepared transaction object.
 * @example
 * ```
 * import { requestDeposit } from "LiquidContinuousMultiTokenVault";
 *
 * const transaction = requestDeposit({
 *  assets: ...,
 *  controller: ...,
 *  owner: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function requestDeposit(options: BaseTransactionOptions<RequestDepositParams>) {
  return prepareContractCall({
    contract: options.contract,
    method: [
      '0x85b77f45',
      [
        {
          internalType: 'uint256',
          name: 'assets',
          type: 'uint256',
        },
        {
          internalType: 'address',
          name: 'controller',
          type: 'address',
        },
        {
          internalType: 'address',
          name: 'owner',
          type: 'address',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: 'requestId_',
          type: 'uint256',
        },
      ],
    ],
    params: [options.assets, options.controller, options.owner],
  });
}

/**
 * Represents the parameters for the "requestRedeem" function.
 */
export type RequestRedeemParams = {
  shares: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'shares'; type: 'uint256' }>;
  controller: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'controller'; type: 'address' }>;
  owner: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'owner'; type: 'address' }>;
};

/**
 * Calls the "requestRedeem" function on the contract.
 * @param options - The options for the "requestRedeem" function.
 * @returns A prepared transaction object.
 * @example
 * ```
 * import { requestRedeem } from "LiquidContinuousMultiTokenVault";
 *
 * const transaction = requestRedeem({
 *  shares: ...,
 *  controller: ...,
 *  owner: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function requestRedeem(options: BaseTransactionOptions<RequestRedeemParams>) {
  return prepareContractCall({
    contract: options.contract,
    method: [
      '0x7d41c86e',
      [
        {
          internalType: 'uint256',
          name: 'shares',
          type: 'uint256',
        },
        {
          internalType: 'address',
          name: 'controller',
          type: 'address',
        },
        {
          internalType: 'address',
          name: 'owner',
          type: 'address',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: 'requestId_',
          type: 'uint256',
        },
      ],
    ],
    params: [options.shares, options.controller, options.owner],
  });
}

/**
 * Represents the parameters for the "requestUnlock" function.
 */
export type RequestUnlockParams = {
  owner: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'owner'; type: 'address' }>;
  depositPeriods: AbiParameterToPrimitiveType<{ internalType: 'uint256[]'; name: 'depositPeriods'; type: 'uint256[]' }>;
  amounts: AbiParameterToPrimitiveType<{ internalType: 'uint256[]'; name: 'amounts'; type: 'uint256[]' }>;
};

/**
 * Calls the "requestUnlock" function on the contract.
 * @param options - The options for the "requestUnlock" function.
 * @returns A prepared transaction object.
 * @example
 * ```
 * import { requestUnlock } from "LiquidContinuousMultiTokenVault";
 *
 * const transaction = requestUnlock({
 *  owner: ...,
 *  depositPeriods: ...,
 *  amounts: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function requestUnlock(options: BaseTransactionOptions<RequestUnlockParams>) {
  return prepareContractCall({
    contract: options.contract,
    method: [
      '0x468200bc',
      [
        {
          internalType: 'address',
          name: 'owner',
          type: 'address',
        },
        {
          internalType: 'uint256[]',
          name: 'depositPeriods',
          type: 'uint256[]',
        },
        {
          internalType: 'uint256[]',
          name: 'amounts',
          type: 'uint256[]',
        },
      ],
      [
        {
          internalType: 'uint256',
          name: '',
          type: 'uint256',
        },
      ],
    ],
    params: [options.owner, options.depositPeriods, options.amounts],
  });
}

/**
 * Represents the parameters for the "revokeRole" function.
 */
export type RevokeRoleParams = {
  role: AbiParameterToPrimitiveType<{ internalType: 'bytes32'; name: 'role'; type: 'bytes32' }>;
  account: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'account'; type: 'address' }>;
};

/**
 * Calls the "revokeRole" function on the contract.
 * @param options - The options for the "revokeRole" function.
 * @returns A prepared transaction object.
 * @example
 * ```
 * import { revokeRole } from "LiquidContinuousMultiTokenVault";
 *
 * const transaction = revokeRole({
 *  role: ...,
 *  account: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function revokeRole(options: BaseTransactionOptions<RevokeRoleParams>) {
  return prepareContractCall({
    contract: options.contract,
    method: [
      '0xd547741f',
      [
        {
          internalType: 'bytes32',
          name: 'role',
          type: 'bytes32',
        },
        {
          internalType: 'address',
          name: 'account',
          type: 'address',
        },
      ],
      [],
    ],
    params: [options.role, options.account],
  });
}

/**
 * Represents the parameters for the "safeBatchTransferFrom" function.
 */
export type SafeBatchTransferFromParams = {
  from: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'from'; type: 'address' }>;
  to: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'to'; type: 'address' }>;
  ids: AbiParameterToPrimitiveType<{ internalType: 'uint256[]'; name: 'ids'; type: 'uint256[]' }>;
  amounts: AbiParameterToPrimitiveType<{ internalType: 'uint256[]'; name: 'amounts'; type: 'uint256[]' }>;
  data: AbiParameterToPrimitiveType<{ internalType: 'bytes'; name: 'data'; type: 'bytes' }>;
};

/**
 * Calls the "safeBatchTransferFrom" function on the contract.
 * @param options - The options for the "safeBatchTransferFrom" function.
 * @returns A prepared transaction object.
 * @example
 * ```
 * import { safeBatchTransferFrom } from "LiquidContinuousMultiTokenVault";
 *
 * const transaction = safeBatchTransferFrom({
 *  from: ...,
 *  to: ...,
 *  ids: ...,
 *  amounts: ...,
 *  data: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function safeBatchTransferFrom(options: BaseTransactionOptions<SafeBatchTransferFromParams>) {
  return prepareContractCall({
    contract: options.contract,
    method: [
      '0x2eb2c2d6',
      [
        {
          internalType: 'address',
          name: 'from',
          type: 'address',
        },
        {
          internalType: 'address',
          name: 'to',
          type: 'address',
        },
        {
          internalType: 'uint256[]',
          name: 'ids',
          type: 'uint256[]',
        },
        {
          internalType: 'uint256[]',
          name: 'amounts',
          type: 'uint256[]',
        },
        {
          internalType: 'bytes',
          name: 'data',
          type: 'bytes',
        },
      ],
      [],
    ],
    params: [options.from, options.to, options.ids, options.amounts, options.data],
  });
}

/**
 * Represents the parameters for the "safeTransferFrom" function.
 */
export type SafeTransferFromParams = {
  from: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'from'; type: 'address' }>;
  to: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'to'; type: 'address' }>;
  id: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'id'; type: 'uint256' }>;
  amount: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'amount'; type: 'uint256' }>;
  data: AbiParameterToPrimitiveType<{ internalType: 'bytes'; name: 'data'; type: 'bytes' }>;
};

/**
 * Calls the "safeTransferFrom" function on the contract.
 * @param options - The options for the "safeTransferFrom" function.
 * @returns A prepared transaction object.
 * @example
 * ```
 * import { safeTransferFrom } from "LiquidContinuousMultiTokenVault";
 *
 * const transaction = safeTransferFrom({
 *  from: ...,
 *  to: ...,
 *  id: ...,
 *  amount: ...,
 *  data: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function safeTransferFrom(options: BaseTransactionOptions<SafeTransferFromParams>) {
  return prepareContractCall({
    contract: options.contract,
    method: [
      '0xf242432a',
      [
        {
          internalType: 'address',
          name: 'from',
          type: 'address',
        },
        {
          internalType: 'address',
          name: 'to',
          type: 'address',
        },
        {
          internalType: 'uint256',
          name: 'id',
          type: 'uint256',
        },
        {
          internalType: 'uint256',
          name: 'amount',
          type: 'uint256',
        },
        {
          internalType: 'bytes',
          name: 'data',
          type: 'bytes',
        },
      ],
      [],
    ],
    params: [options.from, options.to, options.id, options.amount, options.data],
  });
}

/**
 * Represents the parameters for the "setApprovalForAll" function.
 */
export type SetApprovalForAllParams = {
  operator: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'operator'; type: 'address' }>;
  approved: AbiParameterToPrimitiveType<{ internalType: 'bool'; name: 'approved'; type: 'bool' }>;
};

/**
 * Calls the "setApprovalForAll" function on the contract.
 * @param options - The options for the "setApprovalForAll" function.
 * @returns A prepared transaction object.
 * @example
 * ```
 * import { setApprovalForAll } from "LiquidContinuousMultiTokenVault";
 *
 * const transaction = setApprovalForAll({
 *  operator: ...,
 *  approved: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function setApprovalForAll(options: BaseTransactionOptions<SetApprovalForAllParams>) {
  return prepareContractCall({
    contract: options.contract,
    method: [
      '0xa22cb465',
      [
        {
          internalType: 'address',
          name: 'operator',
          type: 'address',
        },
        {
          internalType: 'bool',
          name: 'approved',
          type: 'bool',
        },
      ],
      [],
    ],
    params: [options.operator, options.approved],
  });
}

/**
 * Represents the parameters for the "setRedeemOptimizer" function.
 */
export type SetRedeemOptimizerParams = {
  redeemOptimizer: AbiParameterToPrimitiveType<{
    internalType: 'contract IRedeemOptimizer';
    name: 'redeemOptimizer';
    type: 'address';
  }>;
};

/**
 * Calls the "setRedeemOptimizer" function on the contract.
 * @param options - The options for the "setRedeemOptimizer" function.
 * @returns A prepared transaction object.
 * @example
 * ```
 * import { setRedeemOptimizer } from "LiquidContinuousMultiTokenVault";
 *
 * const transaction = setRedeemOptimizer({
 *  redeemOptimizer: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function setRedeemOptimizer(options: BaseTransactionOptions<SetRedeemOptimizerParams>) {
  return prepareContractCall({
    contract: options.contract,
    method: [
      '0xa05ec4e1',
      [
        {
          internalType: 'contract IRedeemOptimizer',
          name: 'redeemOptimizer',
          type: 'address',
        },
      ],
      [],
    ],
    params: [options.redeemOptimizer],
  });
}

/**
 * Represents the parameters for the "setReducedRate" function.
 */
export type SetReducedRateParams = {
  reducedRateScaled_: AbiParameterToPrimitiveType<{
    internalType: 'uint256';
    name: 'reducedRateScaled_';
    type: 'uint256';
  }>;
  effectiveFromPeriod_: AbiParameterToPrimitiveType<{
    internalType: 'uint256';
    name: 'effectiveFromPeriod_';
    type: 'uint256';
  }>;
};

/**
 * Calls the "setReducedRate" function on the contract.
 * @param options - The options for the "setReducedRate" function.
 * @returns A prepared transaction object.
 * @example
 * ```
 * import { setReducedRate } from "LiquidContinuousMultiTokenVault";
 *
 * const transaction = setReducedRate({
 *  reducedRateScaled_: ...,
 *  effectiveFromPeriod_: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function setReducedRate(options: BaseTransactionOptions<SetReducedRateParams>) {
  return prepareContractCall({
    contract: options.contract,
    method: [
      '0xb5aeb0ac',
      [
        {
          internalType: 'uint256',
          name: 'reducedRateScaled_',
          type: 'uint256',
        },
        {
          internalType: 'uint256',
          name: 'effectiveFromPeriod_',
          type: 'uint256',
        },
      ],
      [],
    ],
    params: [options.reducedRateScaled_, options.effectiveFromPeriod_],
  });
}

/**
 * Represents the parameters for the "setReducedRateAtCurrent" function.
 */
export type SetReducedRateAtCurrentParams = {
  reducedRateScaled_: AbiParameterToPrimitiveType<{
    internalType: 'uint256';
    name: 'reducedRateScaled_';
    type: 'uint256';
  }>;
};

/**
 * Calls the "setReducedRateAtCurrent" function on the contract.
 * @param options - The options for the "setReducedRateAtCurrent" function.
 * @returns A prepared transaction object.
 * @example
 * ```
 * import { setReducedRateAtCurrent } from "LiquidContinuousMultiTokenVault";
 *
 * const transaction = setReducedRateAtCurrent({
 *  reducedRateScaled_: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function setReducedRateAtCurrent(options: BaseTransactionOptions<SetReducedRateAtCurrentParams>) {
  return prepareContractCall({
    contract: options.contract,
    method: [
      '0xb5e8103f',
      [
        {
          internalType: 'uint256',
          name: 'reducedRateScaled_',
          type: 'uint256',
        },
      ],
      [],
    ],
    params: [options.reducedRateScaled_],
  });
}

/**
 * Represents the parameters for the "setVaultStartTimestamp" function.
 */
export type SetVaultStartTimestampParams = {
  vaultStartTimestamp: AbiParameterToPrimitiveType<{
    internalType: 'uint256';
    name: 'vaultStartTimestamp';
    type: 'uint256';
  }>;
};

/**
 * Calls the "setVaultStartTimestamp" function on the contract.
 * @param options - The options for the "setVaultStartTimestamp" function.
 * @returns A prepared transaction object.
 * @example
 * ```
 * import { setVaultStartTimestamp } from "LiquidContinuousMultiTokenVault";
 *
 * const transaction = setVaultStartTimestamp({
 *  vaultStartTimestamp: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function setVaultStartTimestamp(options: BaseTransactionOptions<SetVaultStartTimestampParams>) {
  return prepareContractCall({
    contract: options.contract,
    method: [
      '0x6ca8bd4e',
      [
        {
          internalType: 'uint256',
          name: 'vaultStartTimestamp',
          type: 'uint256',
        },
      ],
      [],
    ],
    params: [options.vaultStartTimestamp],
  });
}

/**
 * Represents the parameters for the "setYieldStrategy" function.
 */
export type SetYieldStrategyParams = {
  yieldStrategy: AbiParameterToPrimitiveType<{
    internalType: 'contract IYieldStrategy';
    name: 'yieldStrategy';
    type: 'address';
  }>;
};

/**
 * Calls the "setYieldStrategy" function on the contract.
 * @param options - The options for the "setYieldStrategy" function.
 * @returns A prepared transaction object.
 * @example
 * ```
 * import { setYieldStrategy } from "LiquidContinuousMultiTokenVault";
 *
 * const transaction = setYieldStrategy({
 *  yieldStrategy: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function setYieldStrategy(options: BaseTransactionOptions<SetYieldStrategyParams>) {
  return prepareContractCall({
    contract: options.contract,
    method: [
      '0x2c4f2416',
      [
        {
          internalType: 'contract IYieldStrategy',
          name: 'yieldStrategy',
          type: 'address',
        },
      ],
      [],
    ],
    params: [options.yieldStrategy],
  });
}

/**
 * Represents the parameters for the "unlock" function.
 */
export type UnlockParams = {
  owner: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'owner'; type: 'address' }>;
  requestId: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'requestId'; type: 'uint256' }>;
};

/**
 * Calls the "unlock" function on the contract.
 * @param options - The options for the "unlock" function.
 * @returns A prepared transaction object.
 * @example
 * ```
 * import { unlock } from "LiquidContinuousMultiTokenVault";
 *
 * const transaction = unlock({
 *  owner: ...,
 *  requestId: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function unlock(options: BaseTransactionOptions<UnlockParams>) {
  return prepareContractCall({
    contract: options.contract,
    method: [
      '0x7eee288d',
      [
        {
          internalType: 'address',
          name: 'owner',
          type: 'address',
        },
        {
          internalType: 'uint256',
          name: 'requestId',
          type: 'uint256',
        },
      ],
      [
        {
          internalType: 'uint256[]',
          name: 'depositPeriods',
          type: 'uint256[]',
        },
        {
          internalType: 'uint256[]',
          name: 'amounts',
          type: 'uint256[]',
        },
      ],
    ],
    params: [options.owner, options.requestId],
  });
}

/**
 * Calls the "unpause" function on the contract.
 * @param options - The options for the "unpause" function.
 * @returns A prepared transaction object.
 * @example
 * ```
 * import { unpause } from "LiquidContinuousMultiTokenVault";
 *
 * const transaction = unpause();
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function unpause(options: BaseTransactionOptions) {
  return prepareContractCall({
    contract: options.contract,
    method: ['0x3f4ba83a', [], []],
    params: [],
  });
}

/**
 * Represents the parameters for the "upgradeToAndCall" function.
 */
export type UpgradeToAndCallParams = {
  newImplementation: AbiParameterToPrimitiveType<{
    internalType: 'address';
    name: 'newImplementation';
    type: 'address';
  }>;
  data: AbiParameterToPrimitiveType<{ internalType: 'bytes'; name: 'data'; type: 'bytes' }>;
};

/**
 * Calls the "upgradeToAndCall" function on the contract.
 * @param options - The options for the "upgradeToAndCall" function.
 * @returns A prepared transaction object.
 * @example
 * ```
 * import { upgradeToAndCall } from "LiquidContinuousMultiTokenVault";
 *
 * const transaction = upgradeToAndCall({
 *  newImplementation: ...,
 *  data: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function upgradeToAndCall(options: BaseTransactionOptions<UpgradeToAndCallParams>) {
  return prepareContractCall({
    contract: options.contract,
    method: [
      '0x4f1ef286',
      [
        {
          internalType: 'address',
          name: 'newImplementation',
          type: 'address',
        },
        {
          internalType: 'bytes',
          name: 'data',
          type: 'bytes',
        },
      ],
      [],
    ],
    params: [options.newImplementation, options.data],
  });
}

/**
 * Represents the parameters for the "withdrawAsset" function.
 */
export type WithdrawAssetParams = {
  to: AbiParameterToPrimitiveType<{ internalType: 'address'; name: 'to'; type: 'address' }>;
  amount: AbiParameterToPrimitiveType<{ internalType: 'uint256'; name: 'amount'; type: 'uint256' }>;
};

/**
 * Calls the "withdrawAsset" function on the contract.
 * @param options - The options for the "withdrawAsset" function.
 * @returns A prepared transaction object.
 * @example
 * ```
 * import { withdrawAsset } from "LiquidContinuousMultiTokenVault";
 *
 * const transaction = withdrawAsset({
 *  to: ...,
 *  amount: ...,
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export function withdrawAsset(options: BaseTransactionOptions<WithdrawAssetParams>) {
  return prepareContractCall({
    contract: options.contract,
    method: [
      '0x38e4f064',
      [
        {
          internalType: 'address',
          name: 'to',
          type: 'address',
        },
        {
          internalType: 'uint256',
          name: 'amount',
          type: 'uint256',
        },
      ],
      [],
    ],
    params: [options.to, options.amount],
  });
}
